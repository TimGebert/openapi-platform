import 'source-map-support/register';

import express, { Application } from '@feathersjs/express';
import feathers from '@feathersjs/feathers';
import socketio from '@feathersjs/socketio';
import cors from 'cors';
import sequelize from 'feathers-sequelize';
import swagger from 'feathers-swagger';
import morgan from 'morgan';
import Sequelize from 'sequelize';

import { initDummyData } from 'backend/initDummyData';
import { logger, overrideConsoleLogger, overrideUtilInspectStyle } from 'backend/logger';
import { generateSdk } from 'client/sdkGeneration';
import { config } from 'config';
import { BuildStatus } from 'model/Plan';

overrideConsoleLogger(logger);
overrideUtilInspectStyle();

async function run(port: number) {
  logger.info('Starting Swagger Platform server...');

  // Initialise database connection
  const dbConnection = new Sequelize(
    config.backend.databaseName,
    config.backend.databaseUsername,
    config.backend.databasePassword,
    {
      dialect: 'postgres',
      host: config.backend.databaseHost,
      port: config.backend.databasePort,
      logging: logger.info,
    },
  );
  try {
    await dbConnection.authenticate();
    logger.info('Successfully connected to database');
  } catch (err) {
    logger.error('Unable to connect to database: %s', err);
    return;
  }

  // Define database model for specifications
  const specificationModel = dbConnection.define(
    'specifications',
    {
      title: {
        type: Sequelize.STRING,
        allowNull: false,
      },
      description: {
        type: Sequelize.STRING,
        allowNull: true,
      },
      path: {
        type: Sequelize.STRING,
        allowNull: false,
      },
    },
    {
      freezeTableName: true,
    },
  );
  const specs = sequelize({
    Model: specificationModel,
  });
  specs.docs = {
    description: 'Swagger/OpenAPI specs',
    definitions: {
      specifications: {
        type: 'object',
        additionalProperties: true,
      },
      'specifications list': {
        type: 'array',
      },
    },
  };

  // Define database model for plans
  const planModel = dbConnection.define(
    'plans',
    {
      target: {
        type: Sequelize.STRING,
        allowNull: false,
      },
      version: {
        type: Sequelize.STRING,
        allowNull: true,
      },
      options: {
        type: Sequelize.JSON,
        allowNull: true,
      },
      buildStatus: {
        type: Sequelize.JSON,
        allowNull: true,
      },
      specId: {
        type: Sequelize.INTEGER,
        allowNull: true,
      },
    },
    {
      freezeTableName: true,
    },
  );
  const plans = sequelize({
    Model: planModel,
  });
  plans.docs = {
    description: 'The plans used for generating SDKs according to a given specification',
    definitions: {
      plans: {
        type: 'object',
        properties: {
          specId: {
            type: 'integer',
            format: 'int64',
            description: 'ID of the specification associated with the plan',
          },
        },
        additionalProperties: true,
      },
      'plans list': {
        type: 'array',
      },
    },
  };

  // Define database model for SDKs
  const sdkModel = dbConnection.define(
    'sdks',
    {
      planId: {
        type: Sequelize.INTEGER,
        allowNull: false,
      },
      path: {
        type: Sequelize.STRING,
        allowNull: false,
      },
    },
    {
      freezeTableName: true,
    },
  );
  const sdks = sequelize({
    Model: sdkModel,
  });
  sdks.docs = {
    description: 'The SDKs generated by Swagger/OpenAPI specs',
    definitions: {
      sdks: {
        type: 'object',
        properties: {
          planId: {
            type: 'integer',
            format: 'int64',
            description: 'ID of the plan to generate the SDK for',
          },
        },
        additionalProperties: true,
      },
      'sdks list': {
        type: 'array',
      },
    },
  };

  // Initialise Express
  const app: Application<object> = express(feathers());
  const swaggerInfo = {
    title: 'Swagger Platform',
    description: 'Open sourced service overlay for SDK management using swagger-codegen',
  };
  app
    .use(
      morgan('dev', {
        stream: logger.stream,
      }),
    )
    .use(express.json())
    .use(express.urlencoded({ extended: true }))
    .configure(express.rest())
    .configure(socketio())
    .configure(
      swagger({
        docsPath: '/docs',
        uiIndex: true,
        info: swaggerInfo,
      }),
    )
    /* 
      TODO: At the moment we need to use feathers-swagger twice, once to use Swagger UI, 
      once for exposing the swagger JSON schema.
    */
    .configure(
      swagger({
        docsPath: '/swagger.json',
        uiIndex: false,
        info: swaggerInfo,
      }),
    )
    .get('/', (req, res) => res.redirect('/docs'))
    .use('/specifications', specs)
    .use('/plans', plans)
    .use('/sdks', sdks)
    .use(express.errorHandler());

  app.service('plans').hooks({
    before: {
      async create(context) {
        await specs.get(context.data.specId, {});
        context.data.buildStatus = BuildStatus.NOTRUN;
        // TODO: Will need to change this at some point
        context.data.latestVersion = 'TODO';
        return context;
      },
    },
  });
  app.service('sdks').hooks({
    before: {
      async create(context) {
        const plan = await plans.get(context.data.planId, {});
        const spec = await specs.get(plan.specId, {});
        const generationResponse = await generateSdk(logger, spec, plan);
        /*
        TODO: The linkside of the info object is probably temporary.
        Might need to consider downloading the object from 
        wherever the Swagger gen API stores it.
        */
        context.data.info = generationResponse;

        return context;
      },
    },
  });

  // Enables CORS requests if configured to do so
  if (config.backend.useCors) {
    app.use(cors());
  }

  // TODO: Use migrations instead of sync to create tables
  await specificationModel.sync();
  await planModel.sync();
  await sdkModel.sync();
  if ((await specificationModel.count()) === 0) {
    // Initialise dummy data if there are no specifications
    await initDummyData(app.service('specifications'), app.service('plans'));
  }

  app.listen(port, (er, err) => {
    logger.info(`Now listening on port ${port}`);
  });
}

const envPort: string | undefined = process.env.PORT;
const appPort: number = envPort ? Number.parseInt(envPort) : config.backend.port;
run(appPort);
