import cors from 'cors';
import { config } from 'config';
import { generateSdk } from 'client/sdkGeneration';
import { BuildStatus } from 'model/Sdk';
import { OldSpec, Spec } from 'model/Spec';
import { initDummyData } from 'backend/initDummyData';
import feathers from '@feathersjs/feathers';
import express from '@feathersjs/express';
import socketio from '@feathersjs/socketio';
import swagger from 'feathers-swagger';
import memory from 'feathers-memory';
async function run(port: number) {
  const specs = memory();
  specs.docs = {
    description: 'Swagger/OpenAPI specifications',
    definitions: {
      specifications: {
        type: 'object',
        additionalProperties: true
      },
      'specifications list': {
        type: 'array'
      }
    }
  };
  const sdks = memory();
  sdks.docs = {
    description: 'The SDKs generated by Swagger/OpenAPI specifications',
    definitions: {
      sdks: {
        type: 'object',
        properties: {
          id: {
            type: 'integer',
            format: 'int64',
            description: 'ID of the specification to generate the SDK for'
          }
        },
        additionalProperties: true
      },
      'sdks list': {
        type: 'array'
      }
    }
  };
  const app: express.Express = express(feathers());
  app
    .use(express.json())
    .use(express.urlencoded({ extended: true }))
    .configure(express.rest())
    .configure(socketio())
    .configure(
      swagger({
        docsPath: '/docs',
        uiIndex: true,
        info: {
          title: 'Swagger Platform',
          description: 'TODO: Someone describe swagger-platform :)'
        }
      })
    )
    .get('/', (req, res) => res.redirect('/docs'))
    .use('/specifications', specs)
    .use('/sdks', sdks)
    .use(express.errorHandler());

  await initDummyData(app.service('specifications'), app.service('sdks'));
  app.service('sdks').hooks({
    before: {
      async create(context) {
        const spec = await specs.get(context.data.specId);
        const generationResponse = await generateSdk(spec);
        context.data.info = generationResponse;
        // TODO: Need to not use hard coded values
        context.data.name = 'TODO';
        context.data.latestVersion = 'TODO';
        context.data.buildStatus = BuildStatus.SUCCESS;
        return context;
      }
    }
  });
  // Enables CORS requests if configured to do so
  if (config.backend.useCors) {
    app.use(cors());
  }
  app.listen(port);
}
const envPort: string | undefined = process.env.PORT;
const port: number = envPort ? Number.parseInt(envPort) : config.backend.port;
run(port);
